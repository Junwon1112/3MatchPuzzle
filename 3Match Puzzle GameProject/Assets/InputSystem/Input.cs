//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/InputSystem/Input.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Input : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Input()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input"",
    ""maps"": [
        {
            ""name"": ""Control"",
            ""id"": ""210cae25-4a44-42d9-b94f-a6cf11d17ba8"",
            ""actions"": [
                {
                    ""name"": ""Click"",
                    ""type"": ""Value"",
                    ""id"": ""e6ed89a4-7e24-44e6-9a9f-544b9fdf7065"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Drag"",
                    ""type"": ""PassThrough"",
                    ""id"": ""ece50315-1bc2-45ff-8166-4124ca4796f0"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b2a0db52-de40-4a15-9e74-15d8ad356abf"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""46045770-28c4-4c5d-aa0f-dba33b5663dd"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drag"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Modifier"",
                    ""id"": ""99a0eb52-c5b2-4f8f-80fb-3eaade255428"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Binding"",
                    ""id"": ""77a06115-f34d-4e31-83f2-aa3f7b3fa6d3"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""LoadingUI"",
            ""id"": ""59d713a3-4948-4396-83bd-e718b60f217e"",
            ""actions"": [
                {
                    ""name"": ""GoToNextScene"",
                    ""type"": ""Button"",
                    ""id"": ""dbf02cd4-4aa0-4d00-a6d8-741cacac60f9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a672b649-4dfd-4330-a13a-031868718a16"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GoToNextScene"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UsingSkill"",
            ""id"": ""e34b771f-8d2a-4958-b31a-4d2fa68aa885"",
            ""actions"": [
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""948ea062-3b51-487f-a96a-10978f4ae7cb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""21a031f6-669f-415a-99d3-5713c30f9715"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MainMenuUI"",
            ""id"": ""bfc1577c-a524-4134-8f05-a5e178f942ce"",
            ""actions"": [
                {
                    ""name"": ""MenuUI"",
                    ""type"": ""Button"",
                    ""id"": ""bf15bfbc-fa10-405c-a949-a6a1a9e0b0c7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""64f6d0d8-94a8-4a73-a850-4cbded1af138"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MenuUI"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Control
        m_Control = asset.FindActionMap("Control", throwIfNotFound: true);
        m_Control_Click = m_Control.FindAction("Click", throwIfNotFound: true);
        m_Control_Drag = m_Control.FindAction("Drag", throwIfNotFound: true);
        // LoadingUI
        m_LoadingUI = asset.FindActionMap("LoadingUI", throwIfNotFound: true);
        m_LoadingUI_GoToNextScene = m_LoadingUI.FindAction("GoToNextScene", throwIfNotFound: true);
        // UsingSkill
        m_UsingSkill = asset.FindActionMap("UsingSkill", throwIfNotFound: true);
        m_UsingSkill_Click = m_UsingSkill.FindAction("Click", throwIfNotFound: true);
        // MainMenuUI
        m_MainMenuUI = asset.FindActionMap("MainMenuUI", throwIfNotFound: true);
        m_MainMenuUI_MenuUI = m_MainMenuUI.FindAction("MenuUI", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Control
    private readonly InputActionMap m_Control;
    private IControlActions m_ControlActionsCallbackInterface;
    private readonly InputAction m_Control_Click;
    private readonly InputAction m_Control_Drag;
    public struct ControlActions
    {
        private @Input m_Wrapper;
        public ControlActions(@Input wrapper) { m_Wrapper = wrapper; }
        public InputAction @Click => m_Wrapper.m_Control_Click;
        public InputAction @Drag => m_Wrapper.m_Control_Drag;
        public InputActionMap Get() { return m_Wrapper.m_Control; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControlActions set) { return set.Get(); }
        public void SetCallbacks(IControlActions instance)
        {
            if (m_Wrapper.m_ControlActionsCallbackInterface != null)
            {
                @Click.started -= m_Wrapper.m_ControlActionsCallbackInterface.OnClick;
                @Click.performed -= m_Wrapper.m_ControlActionsCallbackInterface.OnClick;
                @Click.canceled -= m_Wrapper.m_ControlActionsCallbackInterface.OnClick;
                @Drag.started -= m_Wrapper.m_ControlActionsCallbackInterface.OnDrag;
                @Drag.performed -= m_Wrapper.m_ControlActionsCallbackInterface.OnDrag;
                @Drag.canceled -= m_Wrapper.m_ControlActionsCallbackInterface.OnDrag;
            }
            m_Wrapper.m_ControlActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Click.started += instance.OnClick;
                @Click.performed += instance.OnClick;
                @Click.canceled += instance.OnClick;
                @Drag.started += instance.OnDrag;
                @Drag.performed += instance.OnDrag;
                @Drag.canceled += instance.OnDrag;
            }
        }
    }
    public ControlActions @Control => new ControlActions(this);

    // LoadingUI
    private readonly InputActionMap m_LoadingUI;
    private ILoadingUIActions m_LoadingUIActionsCallbackInterface;
    private readonly InputAction m_LoadingUI_GoToNextScene;
    public struct LoadingUIActions
    {
        private @Input m_Wrapper;
        public LoadingUIActions(@Input wrapper) { m_Wrapper = wrapper; }
        public InputAction @GoToNextScene => m_Wrapper.m_LoadingUI_GoToNextScene;
        public InputActionMap Get() { return m_Wrapper.m_LoadingUI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LoadingUIActions set) { return set.Get(); }
        public void SetCallbacks(ILoadingUIActions instance)
        {
            if (m_Wrapper.m_LoadingUIActionsCallbackInterface != null)
            {
                @GoToNextScene.started -= m_Wrapper.m_LoadingUIActionsCallbackInterface.OnGoToNextScene;
                @GoToNextScene.performed -= m_Wrapper.m_LoadingUIActionsCallbackInterface.OnGoToNextScene;
                @GoToNextScene.canceled -= m_Wrapper.m_LoadingUIActionsCallbackInterface.OnGoToNextScene;
            }
            m_Wrapper.m_LoadingUIActionsCallbackInterface = instance;
            if (instance != null)
            {
                @GoToNextScene.started += instance.OnGoToNextScene;
                @GoToNextScene.performed += instance.OnGoToNextScene;
                @GoToNextScene.canceled += instance.OnGoToNextScene;
            }
        }
    }
    public LoadingUIActions @LoadingUI => new LoadingUIActions(this);

    // UsingSkill
    private readonly InputActionMap m_UsingSkill;
    private IUsingSkillActions m_UsingSkillActionsCallbackInterface;
    private readonly InputAction m_UsingSkill_Click;
    public struct UsingSkillActions
    {
        private @Input m_Wrapper;
        public UsingSkillActions(@Input wrapper) { m_Wrapper = wrapper; }
        public InputAction @Click => m_Wrapper.m_UsingSkill_Click;
        public InputActionMap Get() { return m_Wrapper.m_UsingSkill; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UsingSkillActions set) { return set.Get(); }
        public void SetCallbacks(IUsingSkillActions instance)
        {
            if (m_Wrapper.m_UsingSkillActionsCallbackInterface != null)
            {
                @Click.started -= m_Wrapper.m_UsingSkillActionsCallbackInterface.OnClick;
                @Click.performed -= m_Wrapper.m_UsingSkillActionsCallbackInterface.OnClick;
                @Click.canceled -= m_Wrapper.m_UsingSkillActionsCallbackInterface.OnClick;
            }
            m_Wrapper.m_UsingSkillActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Click.started += instance.OnClick;
                @Click.performed += instance.OnClick;
                @Click.canceled += instance.OnClick;
            }
        }
    }
    public UsingSkillActions @UsingSkill => new UsingSkillActions(this);

    // MainMenuUI
    private readonly InputActionMap m_MainMenuUI;
    private IMainMenuUIActions m_MainMenuUIActionsCallbackInterface;
    private readonly InputAction m_MainMenuUI_MenuUI;
    public struct MainMenuUIActions
    {
        private @Input m_Wrapper;
        public MainMenuUIActions(@Input wrapper) { m_Wrapper = wrapper; }
        public InputAction @MenuUI => m_Wrapper.m_MainMenuUI_MenuUI;
        public InputActionMap Get() { return m_Wrapper.m_MainMenuUI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainMenuUIActions set) { return set.Get(); }
        public void SetCallbacks(IMainMenuUIActions instance)
        {
            if (m_Wrapper.m_MainMenuUIActionsCallbackInterface != null)
            {
                @MenuUI.started -= m_Wrapper.m_MainMenuUIActionsCallbackInterface.OnMenuUI;
                @MenuUI.performed -= m_Wrapper.m_MainMenuUIActionsCallbackInterface.OnMenuUI;
                @MenuUI.canceled -= m_Wrapper.m_MainMenuUIActionsCallbackInterface.OnMenuUI;
            }
            m_Wrapper.m_MainMenuUIActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MenuUI.started += instance.OnMenuUI;
                @MenuUI.performed += instance.OnMenuUI;
                @MenuUI.canceled += instance.OnMenuUI;
            }
        }
    }
    public MainMenuUIActions @MainMenuUI => new MainMenuUIActions(this);
    public interface IControlActions
    {
        void OnClick(InputAction.CallbackContext context);
        void OnDrag(InputAction.CallbackContext context);
    }
    public interface ILoadingUIActions
    {
        void OnGoToNextScene(InputAction.CallbackContext context);
    }
    public interface IUsingSkillActions
    {
        void OnClick(InputAction.CallbackContext context);
    }
    public interface IMainMenuUIActions
    {
        void OnMenuUI(InputAction.CallbackContext context);
    }
}
